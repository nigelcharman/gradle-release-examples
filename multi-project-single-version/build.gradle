buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        // classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'org.ajoberstar:gradle-git-publish:0.3.2'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
}

ext {
    githubUrl = "https://github.com/concordion/${project.name}"
    issuesUrl = "${githubUrl}/issues"
    gitVcsUrl = "${githubUrl}.git"
    gitRepoUri = "git@github.com:concordion/${project.name}.git"
    vcsConnection = "scm:git:git://github.com/concordion/${project.name}.git"

    if (!project.hasProperty("bintrayUsername")) {
        bintrayUsername = ''
    }
    if (!project.hasProperty("bintrayApiKey")) {
        bintrayApiKey = ''
    }
    if (!project.hasProperty("bintrayPassphrase")) {
        bintrayPassphrase = ''
    }
    if (!project.hasProperty("sonatypeUsername")) {
        sonatypeUsername = ''
    }
    if (!project.hasProperty("sonatypePassword")) {
        sonatypePassword = ''
    }
}

task build {
    dependsOn subprojects*.tasks*.findByName('build').minus(null)
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'    
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: com.jfrog.bintray.gradle.BintrayPlugin
    apply plugin: org.ajoberstar.gradle.git.publish.GitPublishPlugin    

    group = 'org.nigel'

    // need utf-8 to get text with non-standard chars e.g. curly apostrophes used correctly 
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // This is a work around for an outstanding issue getting eclipse plugin to honour encoding options for java
    // https://issues.gradle.org/browse/GRADLE-2274
    eclipse {
        File f = file('.settings')

        if (f.exists()) {
            f = file('.settings/org.eclipse.core.resources.prefs')
            f.write('eclipse.preferences.version=1\n')
            f.append('encoding/<project>=UTF-8')
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    repositories {
        // Only required while webdriver project waiting for htmlelements to be published
        maven { url "https://jitpack.io" }
        mavenCentral()
    }

    configurations {
        javaDoclet
    }    

    repositories {
        jcenter()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    task(startmessage).doLast {
        println 'starting build'
    }

    task(printversion).doLast {
        println project.version
        println project.group
        println project.name
    }

    beforeReleaseBuild.dependsOn startmessage, publishToMavenLocal
    afterReleaseBuild.dependsOn printversion



    // Publishing
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    artifacts {
         archives sourcesJar
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "http://oss.jfrog.org/artifactory/simple/oss-snapshot-local/"
                    credentials {
                        username bintrayUsername
                        password bintrayApiKey
                    }
                }
            }
        }
    }

    publishing {
        publications {
            main(MavenPublication) {
                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }

                from components.java

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST

                        name project.name
                        description project.description
                        url 'http://www.concordion.org/cubano'
                        packaging 'jar'
                        inceptionYear '2017'

                        scm {
                            url gitVcsUrl
                            connection vcsConnection
                            developerConnection vcsConnection
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                                distribution 'repo'
                            }
                        }

                        issueManagement {
                            system 'GitHub Issues'
                            url issuesUrl
                        }

                        developers {
                            developer {
                                id 'andrew-sumner'
                                name 'Andrew Sumner'
                                roles { role 'Project Creator' }
                            }
                            developer {
                                id 'nigelcharman'
                                name 'Nigel Charman'
                                roles { role 'Developer' }
                            }
                            developer {
                                id 'jimmykemp'
                                name 'Jimmy Kemp'
                                roles { role 'Developer' }
                            }
                        }
                    }
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
        }
    }

    bintray {
        user = bintrayUsername   // set this in your ~/.gradle/gradle.properties file
        key = bintrayApiKey         // set this in your ~/.gradle/gradle.properties file
        publications = ['main'] // see publications closure
//        dryRun = true
//        publish = true
        pkg {
            repo = 'maven'
            userOrg = 'concordion'
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            issueTrackerUrl = issuesUrl
            vcsUrl = gitVcsUrl
            websiteUrl = 'http://concordion.org/cubano'
            version {
                name = project.version
                released = new Date()
                vcsTag = project.version
                gpg {
                    sign = true
                    passphrase = bintrayPassphrase // set this in your ~/.gradle/gradle.properties file
                }
                //            mavenCentralSync {
                //                sync = true
                //                user = sonatypeUsername              // set this in your ~/.gradle/gradle.properties file
                //                password = sonatypePassword          // OSS user password// set this in your ~/.gradle/gradle.properties file
                //                close = '1'
                //            }
            }
        }
    }
}

release {
    tagTemplate = '$name-$version'
}


wrapper.gradleVersion = '4.4.1'